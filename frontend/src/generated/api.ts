/* tslint:disable */
/* eslint-disable */
/**
 * BildMlue.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AedOutDto
 */
export interface AedOutDto {
    /**
     * 
     * @type {string}
     * @memberof AedOutDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AedOutDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof AedOutDto
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof AedOutDto
     */
    'longitude': number;
    /**
     * 
     * @type {string}
     * @memberof AedOutDto
     */
    'htmlDescription': string;
    /**
     * 
     * @type {string}
     * @memberof AedOutDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof AedOutDto
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AedOutDto
     */
    'isMobile': boolean;
}
/**
 * 
 * @export
 * @interface CreateTodoInDto
 */
export interface CreateTodoInDto {
    /**
     * 
     * @type {string}
     * @memberof CreateTodoInDto
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface TodoDetailOutDto
 */
export interface TodoDetailOutDto {
    /**
     * 
     * @type {string}
     * @memberof TodoDetailOutDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TodoDetailOutDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TodoDetailOutDto
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof TodoDetailOutDto
     */
    'isDone': boolean;
}
/**
 * 
 * @export
 * @interface TodoListOutDto
 */
export interface TodoListOutDto {
    /**
     * 
     * @type {string}
     * @memberof TodoListOutDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TodoListOutDto
     */
    'title': string;
    /**
     * 
     * @type {boolean}
     * @memberof TodoListOutDto
     */
    'isDone': boolean;
}
/**
 * 
 * @export
 * @interface UpdateTodoInDto
 */
export interface UpdateTodoInDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateTodoInDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTodoInDto
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateTodoInDto
     */
    'isDone': boolean;
}

/**
 * AedApi - axios parameter creator
 * @export
 */
export const AedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all AEDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAedGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/aed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AedApi - functional programming interface
 * @export
 */
export const AedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AedApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all AEDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAedGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AedOutDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAedGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AedApi - factory interface
 * @export
 */
export const AedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AedApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all AEDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAedGet(options?: any): AxiosPromise<Array<AedOutDto>> {
            return localVarFp.apiAedGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AedApi - object-oriented interface
 * @export
 * @class AedApi
 * @extends {BaseAPI}
 */
export class AedApi extends BaseAPI {
    /**
     * 
     * @summary Get all AEDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AedApi
     */
    public apiAedGet(options?: AxiosRequestConfig) {
        return AedApiFp(this.configuration).apiAedGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PatientsApi - axios parameter creator
 * @export
 */
export const PatientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPatientsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/patients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientsApi - functional programming interface
 * @export
 */
export const PatientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPatientsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPatientsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PatientsApi - factory interface
 * @export
 */
export const PatientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPatientsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiPatientsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientsApi - object-oriented interface
 * @export
 * @class PatientsApi
 * @extends {BaseAPI}
 */
export class PatientsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public apiPatientsGet(options?: AxiosRequestConfig) {
        return PatientsApiFp(this.configuration).apiPatientsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TodoApi - axios parameter creator
 * @export
 */
export const TodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTodoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTodoIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTodoIdDelete', 'id', id)
            const localVarPath = `/api/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTodoIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTodoIdGet', 'id', id)
            const localVarPath = `/api/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update existing item
         * @param {string} id 
         * @param {UpdateTodoInDto} [updateTodoInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTodoIdPut: async (id: string, updateTodoInDto?: UpdateTodoInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTodoIdPut', 'id', id)
            const localVarPath = `/api/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTodoInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new item
         * @param {CreateTodoInDto} [createTodoInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTodoPost: async (createTodoInDto?: CreateTodoInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTodoInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoApi - functional programming interface
 * @export
 */
export const TodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTodoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TodoListOutDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTodoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTodoIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTodoIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTodoIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodoDetailOutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTodoIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update existing item
         * @param {string} id 
         * @param {UpdateTodoInDto} [updateTodoInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTodoIdPut(id: string, updateTodoInDto?: UpdateTodoInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodoDetailOutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTodoIdPut(id, updateTodoInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new item
         * @param {CreateTodoInDto} [createTodoInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTodoPost(createTodoInDto?: CreateTodoInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodoDetailOutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTodoPost(createTodoInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TodoApi - factory interface
 * @export
 */
export const TodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodoApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTodoGet(options?: any): AxiosPromise<Array<TodoListOutDto>> {
            return localVarFp.apiTodoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTodoIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiTodoIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTodoIdGet(id: string, options?: any): AxiosPromise<TodoDetailOutDto> {
            return localVarFp.apiTodoIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update existing item
         * @param {string} id 
         * @param {UpdateTodoInDto} [updateTodoInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTodoIdPut(id: string, updateTodoInDto?: UpdateTodoInDto, options?: any): AxiosPromise<TodoDetailOutDto> {
            return localVarFp.apiTodoIdPut(id, updateTodoInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new item
         * @param {CreateTodoInDto} [createTodoInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTodoPost(createTodoInDto?: CreateTodoInDto, options?: any): AxiosPromise<TodoDetailOutDto> {
            return localVarFp.apiTodoPost(createTodoInDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodoApi - object-oriented interface
 * @export
 * @class TodoApi
 * @extends {BaseAPI}
 */
export class TodoApi extends BaseAPI {
    /**
     * 
     * @summary Get all items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public apiTodoGet(options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).apiTodoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete item by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public apiTodoIdDelete(id: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).apiTodoIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get item by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public apiTodoIdGet(id: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).apiTodoIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update existing item
     * @param {string} id 
     * @param {UpdateTodoInDto} [updateTodoInDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public apiTodoIdPut(id: string, updateTodoInDto?: UpdateTodoInDto, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).apiTodoIdPut(id, updateTodoInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new item
     * @param {CreateTodoInDto} [createTodoInDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public apiTodoPost(createTodoInDto?: CreateTodoInDto, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).apiTodoPost(createTodoInDto, options).then((request) => request(this.axios, this.basePath));
    }
}


